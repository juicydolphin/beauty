/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) {
      keys.push(key);
    }
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*******************************!*\
  !*** ./site/src/js/script.js ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);


function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var form = document.getElementById('form');
var formFancybox = document.getElementById('form-fancybox');
function getFormData() {
  return _getFormData.apply(this, arguments);
}
function _getFormData() {
  _getFormData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {
    var data, name, phone, response, result;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = new FormData(form);
            name = data.get('name');
            phone = data.get('phone');
            _context.prev = 3;
            document.getElementById("formButton").disabled = true;
            document.getElementById("formButton").classList.add('disabled');
            form.querySelector(".contacts__preloader").classList.remove('hidden');
            _context.next = 9;
            return fetch('https://beauty-saloon-server.herokuapp.com/api/orders', {
              method: 'POST',
              body: JSON.stringify({
                name: name,
                phone: phone
              })
            });
          case 9:
            response = _context.sent;
            _context.next = 12;
            return response.json();
          case 12:
            result = _context.sent;
            document.getElementById("formButton").disabled = false;
            document.getElementById("formButton").classList.remove('disabled');
            form.querySelector(".contacts__preloader").classList.add('hidden');
            form.querySelector(".contacts__result-message").classList.remove('hidden');
            setTimeout(function () {
              form.querySelector(".contacts__result-message").classList.add('hidden');
            }, 3000);
            console.log('Успех:', JSON.stringify(result));
            _context.next = 24;
            break;
          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](3);
            console.error('Ошибка:', _context.t0);
          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 21]]);
  }));
  return _getFormData.apply(this, arguments);
}
var menu = document.getElementById('price-menu');
menu.addEventListener('click', priceSwitcher);
function priceSwitcher(e) {
  e.preventDefault();
  if (e.target.id === 'haircut') {
    var haircutData = {
      leftTitleFirst: 'Женская стрижка',
      leftTextFirst: 'Короткие волосы',
      leftTitleSecond: 'Мужская стрижка',
      leftTextSecond: 'Короткие волосы',
      leftTitleThird: 'Детский стиль',
      leftTextThird: 'Короткие волосы',
      leftTitleForth: 'Креативный стиль',
      leftTextForth: 'Короткие волосы',
      rightTitleFirst: 'Стрижка бороды и усов',
      rightTextFirst: 'Короткие волосы',
      rightTitleSecond: 'Эксперсс укладка',
      rightTextSecond: 'Короткие волосы',
      rightTitleThird: 'Уклака дневная',
      rightTextThird: 'Короткие волосы',
      rightTitleForth: 'Прическа вечерняя (свадебная)',
      rightTextForth: 'Короткие волосы',
      leftPriceFirst: '1200 ₽',
      leftPriceSecond: '1200 ₽',
      leftPriceThird: '1200 ₽',
      leftPriceForth: '1200 ₽',
      rightPriceFirst: '1200 ₽',
      rightPriceSecond: '1200 ₽',
      rightPriceThird: '1200 ₽',
      rightPriceForth: '3000 ₽'
    };
    setText(haircutData);
  } else if (e.target.id === 'cosmetology') {
    var cosmetologyData = {
      leftTitleFirst: 'Салициловый пилинг',
      leftTextFirst: '18+ и старше',
      leftTitleSecond: 'Миндальный пилинг',
      leftTextSecond: '18+ и старше',
      leftTitleThird: 'Ретиноловый пилинг',
      leftTextThird: '18+ и старше',
      leftTitleForth: '',
      leftTextForth: '',
      rightTitleFirst: '',
      rightTextFirst: '',
      rightTitleSecond: '',
      rightTextSecond: '',
      rightTitleThird: '',
      rightTextThird: '',
      rightTitleForth: '',
      rightTextForth: '',
      leftPriceFirst: '2900 ₽',
      leftPriceSecond: '2900 ₽',
      leftPriceThird: '2900 ₽',
      leftPriceForth: '',
      rightPriceFirst: '',
      rightPriceSecond: '',
      rightPriceThird: '',
      rightPriceForth: ''
    };
    setText(cosmetologyData);
  } else if (e.target.id === 'nails') {
    var nailsData = {
      leftTitleFirst: 'Маникюр',
      leftTextFirst: '60 минут',
      leftTitleSecond: 'Педикюр',
      leftTextSecond: '30 минут',
      leftTitleThird: 'SPA для рук',
      leftTextThird: '30 минут',
      leftTitleForth: 'SPA для ног',
      leftTextForth: '30 минут',
      rightTitleFirst: '',
      rightTextFirst: '',
      rightTitleSecond: '',
      rightTextSecond: '',
      rightTitleThird: '',
      rightTextThird: '',
      rightTitleForth: '',
      rightTextForth: '',
      leftPriceFirst: '1000 ₽',
      leftPriceSecond: '1300 ₽',
      leftPriceThird: '500 ₽',
      leftPriceForth: '700 ₽',
      rightPriceFirst: '',
      rightPriceSecond: '',
      rightPriceThird: '',
      rightPriceForth: ''
    };
    setText(nailsData);
  } else if (e.target.id === 'makeup') {
    var makeupData = {
      leftTitleFirst: 'Макияж дневной',
      leftTextFirst: '60 минут',
      leftTitleSecond: 'Макияж вечерний',
      leftTextSecond: '90 минут',
      leftTitleThird: 'Лифтинг',
      leftTextThird: '60 минут',
      leftTitleForth: 'Макияж для фотосессий',
      leftTextForth: '90 минут',
      rightTitleFirst: '',
      rightTextFirst: '',
      rightTitleSecond: '',
      rightTextSecond: '',
      rightTitleThird: '',
      rightTextThird: '',
      rightTitleForth: '',
      rightTextForth: '',
      leftPriceFirst: '1000 ₽',
      leftPriceSecond: '1500 ₽',
      leftPriceThird: '1500 ₽',
      leftPriceForth: '2000 ₽',
      rightPriceFirst: '',
      rightPriceSecond: '',
      rightPriceThird: '',
      rightPriceForth: ''
    };
    setText(makeupData);
  } else if (e.target.id === 'brows') {
    var browsData = {
      leftTitleFirst: 'Коррекция бровей',
      leftTextFirst: '30 минут',
      leftTitleSecond: 'Ламинирование бровей',
      leftTextSecond: '60 минут',
      leftTitleThird: 'Окрашивание бровей',
      leftTextThird: '30 минут',
      leftTitleForth: '',
      leftTextForth: '',
      rightTitleFirst: '',
      rightTextFirst: '',
      rightTitleSecond: '',
      rightTextSecond: '',
      rightTitleThird: '',
      rightTextThird: '',
      rightTitleForth: '',
      rightTextForth: '',
      leftPriceFirst: '500 ₽',
      leftPriceSecond: '600 ₽',
      leftPriceThird: '500 ₽',
      leftPriceForth: '',
      rightPriceFirst: '',
      rightPriceSecond: '',
      rightPriceThird: '',
      rightPriceForth: ''
    };
    setText(browsData);
  } else if (e.target.id === 'massage') {
    var massageData = {
      leftTitleFirst: 'Лимфодренажный массаж',
      leftTextFirst: '60 минут',
      leftTitleSecond: 'Лечебный массаж',
      leftTextSecond: '40 минут',
      leftTitleThird: 'Русский SPA массаж',
      leftTextThird: '120 минут',
      leftTitleForth: 'Сибирское SPA',
      leftTextForth: '120 минут',
      rightTitleFirst: 'Березовое SPA',
      rightTextFirst: '120 минут',
      rightTitleSecond: 'Вулканический уход',
      rightTextSecond: '150 минут',
      rightTitleThird: '',
      rightTextThird: '',
      rightTitleForth: '',
      rightTextForth: '',
      leftPriceFirst: '2100 ₽',
      leftPriceSecond: '1500 ₽',
      leftPriceThird: '3300 ₽',
      leftPriceForth: '4900 ₽',
      rightPriceFirst: '7500 ₽',
      rightPriceSecond: '7500 ₽',
      rightPriceThird: '',
      rightPriceForth: ''
    };
    setText(massageData);
  }
}
function setText(data) {
  var leftTitleFirst = document.getElementById('left-title-first');
  var leftTitleSecond = document.getElementById('left-title-second');
  var leftTitleThird = document.getElementById('left-title-third');
  var leftTitleForth = document.getElementById('left-title-forth');
  var leftTextFirst = document.getElementById('left-text-first');
  var leftTextSecond = document.getElementById('left-text-second');
  var leftTextThird = document.getElementById('left-text-third');
  var leftTextForth = document.getElementById('left-text-forth');
  var rightTitleFirst = document.getElementById('right-title-first');
  var rightTitleSecond = document.getElementById('right-title-second');
  var rightTitleThird = document.getElementById('right-title-third');
  var rightTitleForth = document.getElementById('right-title-forth');
  var rightTextFirst = document.getElementById('right-text-first');
  var rightTextSecond = document.getElementById('right-text-second');
  var rightTextThird = document.getElementById('right-text-third');
  var rightTextForth = document.getElementById('right-text-forth');
  var leftPriceFirst = document.getElementById('left-price-first');
  var leftPriceSecond = document.getElementById('left-price-second');
  var leftPriceThird = document.getElementById('left-price-third');
  var leftPriceForth = document.getElementById('left-price-forth');
  var rightPriceFirst = document.getElementById('right-price-first');
  var rightPriceSecond = document.getElementById('right-price-second');
  var rightPriceThird = document.getElementById('right-price-third');
  var rightPriceForth = document.getElementById('right-price-forth');
  leftTitleFirst.textContent = data.leftTitleFirst;
  leftTextFirst.textContent = data.leftTextFirst;
  leftTitleSecond.textContent = data.leftTitleSecond;
  leftTextSecond.textContent = data.leftTextSecond;
  leftTitleThird.textContent = data.leftTitleThird;
  leftTextThird.textContent = data.leftTextThird;
  leftTitleForth.textContent = data.leftTitleForth;
  leftTextForth.textContent = data.leftTextForth;
  rightTitleFirst.textContent = data.rightTitleFirst;
  rightTextFirst.textContent = data.rightTextFirst;
  rightTitleSecond.textContent = data.rightTitleSecond;
  rightTextSecond.textContent = data.rightTextSecond;
  rightTitleThird.textContent = data.rightTitleThird;
  rightTextThird.textContent = data.rightTextThird;
  rightTitleForth.textContent = data.rightTitleForth;
  rightTextForth.textContent = data.rightTextForth;
  leftPriceFirst.textContent = data.leftPriceFirst;
  leftPriceSecond.textContent = data.leftPriceSecond;
  leftPriceThird.textContent = data.leftPriceThird;
  leftPriceForth.textContent = data.leftPriceForth;
  rightPriceFirst.textContent = data.rightPriceFirst;
  rightPriceSecond.textContent = data.rightPriceSecond;
  rightPriceThird.textContent = data.rightPriceThird;
  rightPriceForth.textContent = data.rightPriceForth;
}
var hamb = document.querySelector("#hamb");
var popup = document.querySelector("#popup");
var html = document.html;
var menuHamb = document.querySelector("#menu");
hamb.addEventListener("click", hambHandler);
function hambHandler(e) {
  e.preventDefault();
  popup.classList.toggle("open");
  hamb.classList.toggle("active");
  html.classList.toggle("noscroll");
}
var links = Array.from(menuHamb.children);
links.forEach(function (link) {
  link.addEventListener("click", closeOnClick);
});
function closeOnClick() {
  popup.classList.remove("open");
  hamb.classList.remove("active");
  html.classList.remove("noscroll");
}
var smoothLinks = document.querySelectorAll('a[href^="#"]');
var _iterator = _createForOfIteratorHelper(smoothLinks),
  _step;
try {
  var _loop = function _loop() {
    var smoothLink = _step.value;
    smoothLink.addEventListener('click', function (e) {
      e.preventDefault();
      var id = smoothLink.getAttribute('href');
      document.querySelector(id).scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    });
  };
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    _loop();
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}
function getFormFancyboxData() {
  return _getFormFancyboxData.apply(this, arguments);
}
function _getFormFancyboxData() {
  _getFormFancyboxData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {
    var data, name, phone, masterId, serviceId, visitDate, response, result;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            data = new FormData(formFancybox);
            name = data.get('name');
            phone = data.get('phone');
            masterId = data.get('masterId');
            serviceId = data.get('serviceId');
            visitDate = data.get('visitDate');
            _context2.prev = 6;
            document.getElementById("fancyButton").disabled = true;
            document.getElementById("fancyButton").classList.add('disabled');
            formFancybox.querySelector(".contacts__preloader").classList.remove('hidden');
            _context2.next = 12;
            return fetch('https://beauty-saloon-server.herokuapp.com/api/orders', {
              method: 'POST',
              body: JSON.stringify({
                name: name,
                phone: phone,
                masterId: masterId,
                serviceId: serviceId,
                visitDate: visitDate
              })
            });
          case 12:
            response = _context2.sent;
            _context2.next = 15;
            return response.json();
          case 15:
            result = _context2.sent;
            document.getElementById("fancyButton").disabled = false;
            document.getElementById("fancyButton").classList.remove('disabled');
            formFancybox.querySelector(".contacts__preloader").classList.add('hidden');
            formFancybox.querySelector(".contacts__result-message").classList.remove('hidden');
            setTimeout(function () {
              formFancybox.querySelector(".contacts__result-message").classList.add('hidden');
              window.location.href = window.location.href.replace("#dialogHeader", '');
              window.location.href = window.location.href.replace("#dialogFirst", '#popular');
              window.location.href = window.location.href.replace("#dialogSecond", '#popular');
              window.location.href = window.location.href.replace("#dialogThird", '#popular');
              window.location.href = window.location.href.replace("#dialogFourth", '#popular');
              window.location.href = window.location.href.replace("#dialogFifth", '#popular');
              window.location.href = window.location.href.replace("#dialogMaster1", '#masters');
              window.location.href = window.location.href.replace("#dialogMaster2", '#masters');
              window.location.href = window.location.href.replace("#dialogMaster3", '#masters');
              window.location.href = window.location.href.replace("#dialogMaster4", '#masters');
            }, 3000);
            console.log('Успех:', JSON.stringify(result));
            _context2.next = 27;
            break;
          case 24:
            _context2.prev = 24;
            _context2.t0 = _context2["catch"](6);
            console.error('Ошибка:', _context2.t0);
          case 27:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[6, 24]]);
  }));
  return _getFormFancyboxData.apply(this, arguments);
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,